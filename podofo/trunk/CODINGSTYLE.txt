This document tries to give an overview of the codingstyle used in PoDoFo.
To keep the code consistent every commit should apply to this codingstyle.

The codingstyle of PoDoFo is in no way perfect and is in parts not even the
preferred codingstyle of the maintainers. But consistency is more important
than personal preferences and most parts of the style can be applied through
simple editor settings.

       2006 Dominik Seichter <domseichter@web.de> 

0. Overall Rule
===============

    Documentation is an important part of PoDoFo. Every class and method
    should include appropriate documentation in Doxygen format so that
    automatic API documentation can be generated and the code can be
    easily understand by everyone.

    The comments are most important in the header files, though additional
    information may also be included in the source itself if necessary.  

1. Code formatting
==================

1.1 Indentation

     The code is indented by 4 spaces. No tabs and no discussion ;)

1.2 Brackets

    Brackets always start in a new line of their own. The only exception are
    class and struct declarations and try and catch blocks.

    Example:

    if( true ) 
    {
         // do something
    }

    but 

    class MyClass {

    };

    If only one line follows after an if or while statement, no brackets are
    needed, however they may be used if the author feels that there is a 
    possibility for future expansion in that area.


1.3 Inline functions

    Inline functions are declared in the class definition in the header file.
    They are implemented in the header file after the class definition.  
    The author may choose to either implement them directly at the same location
    as the declaration or may place them at the end of the header file (preferred).

2. Naming
=========

2.1 Variables

    Someone started to use hungarian notation in PoDoFo. Well, the maintainer
    thinks this was one of the worst ideas he ever had... . Nontheless, the
    point is consistency and not personall preference. 

    PoDoFo uses hungarian notation for the following types:

    enum typenames	  should start with an			E
    enum variables	  should start with an			e
    struture typesnames	  should start with a			T
    struture variables	  should start with a			t
    pointer		  should start with a			p
    strings		  should start with a			s
    c-strings		  should start with			psz
(pointer zero terminated)
    numbers		  should start with a			n
    long's		  should start with a			l
    bool's		  should start with a			b
    references            often  start with a                   r

    Example:

    bool  bDecision;
    long  lValue;
    char* pszString;
    int   nNumber;

2.2 Member variables

    Member variables in classes are additionally prefixed with "m_".

    Examples:

    class MyClass {

    private:
    bool m_bMemberVar;

    };

2.3 Methods

    All methods start with an uppercase letter and every new word is
    capitalized again.

    MyClass::FunctionWithLongName( long lParameter );

    Properties are set using a function with the prefix "Set", and retrieved with
    a "Get".   Also, unless there is a good reason not to - all "Getters" should be
    marked as const.

    MyClass::SetProperty( long lValue );
    long MyClass::GetProperty() const;

    Additionally, please use the prefixes "Has" and "Is" when appropriate.
    E.g. 

    PdfDictionary::HasKey();
    PdfDocument::IsLinearized();

2.4 NULL-Pointers

    NULL Pointers are initialized in the code with the constant NULL. Please
    do not use 0 or 0L but use NULL.

3. General Guidelines
===================

3.1 Casting

    C++ style casting is strongly preferred, and the use of C-style casts will
    generate warnings on gcc builds. Use, as appropriate,
        static_cast<>
        const_cast<>
        reinterpret_cast<>
    Dynamic casting and typeid are not presently used in PoDoFo.

    const_cast<> should be avoided unless it is absolutely required, especially
    for `const char *' variables that might ever take a string literal value.

3.2 Static arrays

    Static data should be declared as an array of const char rather than a
    pointer to const char whereever possible. This will help the compiler put
    it in the static read only data section of the compiled object, resulting
    in a smaller memory footprint, faster load times, and hardware protection
    against accidental writes to the data.

    char myStaticData[] = "This is the right way".
    char * myStaticData = "Avoid this way".

    Two dimensional arrays may be specified in a similar way - see
    s_szPdfVersions in PdfDefines.{cpp,h} .

3.3 Use of temporary objects

    Where possible, it can be better to use a temporary rather than
    storing a named object, eg:

    DoSomething( PdfName("blah") );

    rather than

    PdfName n("blah");
    DoSomething( n );

    as this makes it easier for the compiler to optimise the call, may reduce
    the stack size of the function, etc. Don't forget to consider the lifetime
    of the temporary, however.
